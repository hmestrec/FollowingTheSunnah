/* eslint-disable */
// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.

const { DynamoDBClient } = require('@aws-sdk/client-dynamodb');
const { DynamoDBDocumentClient, PutCommand, GetCommand } = require('@aws-sdk/lib-dynamodb');
const express = require('express');

const ddbClient = new DynamoDBClient({ region: process.env.TABLE_REGION });
const ddbDocClient = DynamoDBDocumentClient.from(ddbClient);

// Set your table name here
const tableName = "EditorContent-main";

const app = express();
app.use(express.json()); // Parse JSON body

// Enable CORS for all methods
app.use((req, res, next) => {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "Content-Type");
    next();
});

/************************************
* HTTP POST method to save content *
*************************************/

app.post('/editor', async (req, res) => {
    const { id, content } = req.body;

    // Validate request body
    if (!id || !content) {
        return res.status(400).json({ error: 'ID and content are required.' });
    }

    const putItemParams = {
        TableName: tableName,
        Item: {
            id: { S: id }, // DynamoDB expects the type to be specified
            content: { S: content }
        }
    };

    try {
        await ddbDocClient.send(new PutCommand(putItemParams));
        return res.json({ success: 'Content saved successfully!' });
    } catch (error) {
        console.error('Error saving content:', error);
        return res.status(500).json({ error: 'Could not save content' });
    }
});

/************************************
* HTTP GET method to retrieve content *
*************************************/

app.get('/editor/:id', async (req, res) => {
    const { id } = req.params; // Extract ID from the request parameters

    const getItemParams = {
        TableName: tableName,
        Key: {
            id: { S: id }
        }
    };

    try {
        const data = await ddbDocClient.send(new GetCommand(getItemParams));
        if (data.Item) {
            return res.json({
                id: data.Item.id.S,
                content: data.Item.content.S
            });
        } else {
            return res.status(404).json({ error: 'Content not found' });
        }
    } catch (error) {
        console.error('Error fetching content:', error);
        return res.status(500).json({ error: 'Could not fetch content' });
    }
});

// Start the Express app
app.listen(3000, () => {
    console.log("App started on port 3000");
});

// Export the app object
module.exports = app;
